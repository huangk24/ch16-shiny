) %>%
colorbar(title = "xxx") %>%
layout(
title = 'yyy', geo = g
)
plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(
text = ~paste(date, state, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
color = ~num_killed,
symbol = I("square"),
size = I(8)
) %>%
colorbar(title = "xxx") %>%
layout(
title = 'yyy', geo = g
)
plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, state, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("square"),
size = I(8)
) %>%
colorbar(title = "xxx") %>%
layout(
title = 'yyy', geo = g
)
plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, state, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("square"),
size = I(8)
) %>%
layout(
title = 'yyy', geo = g
)
plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("square"),
size = I(8)
) %>%
layout(
title = 'yyy', geo = g
)
plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("square"),
size = I(8)
) %>%
layout(
title = 'Shooting map in the United State', geo = g
)
plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("circle"),
size = I(8)
) %>%
layout(
title = 'Shooting map in the United State', geo = g
)
plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("circle"),
size = num_killed
) %>%
layout(
title = 'Shooting map in the United State', geo = g
)
plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("circle"),
size = shooting_2018$num_killed
) %>%
layout(
title = 'Shooting map in the United State', geo = g
)
plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("circle"),
size = I(8)
) %>%
layout(
title = 'Shooting map in the United State', geo = g
)
shooting_map <- plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("circle"),
size = I(8)
) %>%
layout(
title = 'Shooting map in the United State', geo = g
)
library(knitr)
library(dplyr)
library(ggplot2)
library(maps)
library(mapdata)
library(plotly)
setwd("~/UW/2018 spring/info 201/a6-mapping-shootings-huangk24")
source("analysis.R")
library(knitr)
kable(state_data)
library(dplyr)
library(ggplot2)
library(maps)
library(mapdata)
library(plotly)
shooting_2018 <- read.csv("data/shootings-2018.csv")
num_shooting <- nrow(shooting_2018)
num_kill <- shooting_2018 %>%
select(num_killed) %>%
sum()
num_injure <- shooting_2018 %>%
select(num_injured) %>%
sum()
most_impact_city <- shooting_2018 %>%
filter(num_killed == max(num_killed))
most_impact_state <- shooting_2018 %>%
group_by(state) %>%
summarise(total_kill = sum(num_killed)) %>%
filter(total_kill == max(total_kill))
state_num_shootings <- shooting_2018 %>%
group_by(state) %>%
count()
colnames(state_num_shootings)[2] <- "num_shootings"
state_kill_injure <- shooting_2018 %>%
group_by(state) %>%
summarise(kill_injure = (sum(num_killed) + sum(num_injured)))
state_data <- shooting_2018 %>%
group_by(state) %>%
summarise(total_kill = sum(num_killed), total_injure = sum(num_injured)) %>%
mutate(total_kill_injure = state_kill_injure$kill_injure,
total_shooting = state_num_shootings$num_shootings) %>%
arrange(-total_shooting)
############################
View(map_data('state'))
state_map <- map_data('state')
View(shooting_2018)
ggplot() +
geom_polygon(data = state_map, aes(x=long, y = lat, group = group), color="black", fill="white") +
geom_point(data= shooting_2018, aes(x=long, y = lat, group=state, color= num_killed ))
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
shooting_map <- plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("circle"),
size = I(8)
) %>%
layout(
title = 'Shooting map in the United State', geo = g
)
View(state_data)
state_data$state
p <- plot_ly(y=state_data$total_kill, x=state_data, histfunc='sum', type = "histogram") %>%
layout(yaxis=list(type='linear'))
p
p <- plot_ly(y=total_kill, x=state_data, histfunc='sum', type = "histogram") %>%
layout(yaxis=list(type='linear'))
p <- plot_ly(y=y, x=state_data, histfunc='sum', type = "histogram") %>%
layout(yaxis=list(type='linear'))
y = c("5","10","3","10","5")
p <- plot_ly(y=y, x=state_data, histfunc='sum', type = "histogram") %>%
layout(yaxis=list(type='linear'))
p
x = c(state_data)
View(x)
x = c(state_data$state)
x
state_data$state
p <- plot_ly(y=y, x=state_data, type = "histogram") %>%
layout(yaxis=list(type='linear'))
p
p <- plot_ly(y=state_data$total_kill, x=state_data, type = "histogram")
p
state_data$total_kill
y=state_data$total_kill
p <- plot_ly(y=state_data$total_kill, x=state_data$state, type = "histogram")
p
p <- plot_ly(x=state_data$state, y=state_data$total_kill, type = "histogram")
p
p <- plot_ly(x=state_data$state, y=state_data$total_kill, name = "SF Zoo")
p
p <- plot_ly(x=state_data$state, y=state_data$total_kill_injure, name = "Shooting data")
p
p <- plot_ly(x=state_data$state, y=state_data$total_kill_injure,
name = "Shooting data", type = "bar")
p
?plot_ly
plot_ly(shooting_2018)
plot_ly(shooting_2018, x=state_data$state, y=state_data$total_kill_injure)
plot_ly(shooting_2018, x = state, y = total_kill_injure)
plot_ly(shooting_2018, x=state_data$state, y=total_kill_injure)
p <- plot_ly(x=tate_data$total_kill_injure, y=sstate_data$state,
name = "Shooting data", type = "bar")
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state,
name = "Shooting data", type = "bar")
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state) %>%
layout(yaxis = 'State', xaxis = "# killed and injured")
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state) %>%
layout(yaxis = 'State', xaxis = "# killed and injured")
p
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state) %>%
layout(yaxis = 'State', xaxis = "# killed and injured")
p
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state,
name = "Shooting data", type = "bar") %>%
layout(yaxis = 'State', xaxis = "# killed and injured")
p
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state,
name = "Shooting data", type = "bar")
p
p <- plot_ly(x=-state_data$total_kill_injure, y=state_data$state,
name = "Shooting data", type = "bar")
p
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state,
name = "Shooting data", type = "bar")
p
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state,
name = "Shooting data", type = "bar") %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
p
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state,
name = "Shooting data", type = "bar") %>%
layout(yaxis = list(title = 'Count'))
p
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state,
name = "Shooting data", type = "bar") %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '# Killed and injured'))
p
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state) %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '# Killed and injured'))
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state) %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '# Killed and injured'))
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state,
name = "Shooting data", type = "bar") %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '# Killed and injured'))
p <- plot_ly(x=state_data$total_kill_injure, y=state_data$state,
name = "Shooting data", type = "bar") %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '# Killed and injured'))
p <- plot_ly(state_data, x=~total_kille, y=~state,
name = "total kill", type = "bar") %>%
add_trace(x=~total_injure, name = 'total injure') %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '# Killed and injured'))
p
p <- plot_ly(state_data, x=~total_kill, y=~state,
name = "total kill", type = "bar") %>%
add_trace(x=~total_injure, name = 'total injure') %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '# Killed and injured'))
p
state_chart <- plot_ly(state_data, x=~total_kill, y=~state,
name = "total kill", type = "bar") %>%
add_trace(x=~total_injure, name = 'total injure') %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '# Killed and injured'))
state_chart <- plot_ly(state_data, x=~total_kill, y=~state,
name = "total kill", type = "bar") %>%
add_trace(x=~total_injure, name = 'total injure') %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '#Killed/injured'))
shooting_2018 <- read.csv("data/shootings-2018.csv")
num_shooting <- nrow(shooting_2018)
num_kill <- shooting_2018 %>%
select(num_killed) %>%
sum()
num_injure <- shooting_2018 %>%
select(num_injured) %>%
sum()
most_impact_city <- shooting_2018 %>%
filter(num_killed == max(num_killed))
most_impact_state <- shooting_2018 %>%
group_by(state) %>%
summarise(total_kill = sum(num_killed)) %>%
filter(total_kill == max(total_kill))
state_num_shootings <- shooting_2018 %>%
group_by(state) %>%
count()
colnames(state_num_shootings)[2] <- "num_shootings"
state_kill_injure <- shooting_2018 %>%
group_by(state) %>%
summarise(kill_injure = (sum(num_killed) + sum(num_injured)))
state_data <- shooting_2018 %>%
group_by(state) %>%
summarise(total_kill = sum(num_killed), total_injure = sum(num_injured)) %>%
mutate(total_kill_injure = state_kill_injure$kill_injure,
total_shooting = state_num_shootings$num_shootings) %>%
arrange(-total_shooting)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
shooting_map <- plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("circle"),
size = I(8)
) %>%
layout(
title = 'Shooting map in the United State', geo = g
)
state_chart <- plot_ly(state_data, x=~total_kill, y=~state,
name = "total kill", type = "bar") %>%
add_trace(x=~total_injure, name = 'total injure') %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '#Killed/injured'))
state_chart
shooting_map
setwd("~/UW/2018 spring/info 201/a6-mapping-shootings-huangk24")
library(dplyr)
library(ggplot2)
library(maps)
library(mapdata)
library(plotly)
shooting_2018 <- read.csv("data/shootings-2018.csv")
num_shooting <- nrow(shooting_2018)
num_kill <- shooting_2018 %>%
select(num_killed) %>%
sum()
num_injure <- shooting_2018 %>%
select(num_injured) %>%
sum()
most_impact_city <- shooting_2018 %>%
filter(num_killed == max(num_killed))
most_impact_state <- shooting_2018 %>%
group_by(state) %>%
summarise(total_kill = sum(num_killed)) %>%
filter(total_kill == max(total_kill))
state_num_shootings <- shooting_2018 %>%
group_by(state) %>%
count()
colnames(state_num_shootings)[2] <- "num_shootings"
state_kill_injure <- shooting_2018 %>%
group_by(state) %>%
summarise(kill_injure = (sum(num_killed) + sum(num_injured)))
state_data <- shooting_2018 %>%
group_by(state) %>%
summarise(total_kill = sum(num_killed), total_injure = sum(num_injured)) %>%
mutate(total_kill_injure = state_kill_injure$kill_injure,
total_shooting = state_num_shootings$num_shootings) %>%
arrange(-total_shooting)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
shooting_map <- plot_geo(data = shooting_2018, lat = ~lat, lon = ~long) %>%
add_markers(split = ~state,
text = ~paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured), sep = "<br />"),
symbol = I("circle"),
size = I(8)
) %>%
layout(
title = 'Shooting map in the United State', geo = g
)
state_chart <- plot_ly(state_data, x=~total_kill, y=~state,
name = "total kill", type = "bar") %>%
add_trace(x=~total_injure, name = 'total injure') %>%
layout(yaxis = list(title = 'State'), xaxis = list(title = '#Killed/injured'))
lintr::lint("analysis.R")
styler:::style_active_file()
styler:::style_active_file()
lintr::lint("analysis.R")
styler:::style_active_file()
lintr::lint("index.Rmd")
library(dplyr)
library(ggplot2)
library(maps)
library(mapdata)
library(plotly)
shooting_2018 <- read.csv("data/shootings-2018.csv")
num_shooting <- nrow(shooting_2018)
num_kill <- shooting_2018 %>%
select(num_killed) %>%
sum()
num_injure <- shooting_2018 %>%
select(num_injured) %>%
sum()
most_impact_city <- shooting_2018 %>%
filter(num_killed == max(num_killed))
most_impact_state <- shooting_2018 %>%
group_by(state) %>%
summarise(total_kill = sum(num_killed)) %>%
filter(total_kill == max(total_kill))
state_num_shootings <- shooting_2018 %>%
group_by(state) %>%
count()
colnames(state_num_shootings)[2] <- "num_shootings"
state_kill_injure <- shooting_2018 %>%
group_by(state) %>%
summarise(kill_injure = (sum(num_killed) + sum(num_injured)))
state_data <- shooting_2018 %>%
group_by(state) %>%
summarise(total_kill = sum(num_killed), total_injure = sum(num_injured)) %>%
mutate(
total_kill_injure = state_kill_injure$kill_injure,
total_shooting = state_num_shootings$num_shootings
) %>%
arrange(-total_shooting)
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
shooting_map <- plot_geo(data = shooting_2018, lat = ~ lat, lon = ~ long) %>%
add_markers(
split = ~ state,
text = ~ paste(date, city, paste("#kill: ", num_killed),
paste("#injure: ", num_injured),
sep = "<br />"
),
symbol = I("circle"),
size = I(8)
) %>%
layout(
title = "Shooting map in the United State", geo = g
)
state_chart <- plot_ly(state_data,
x = ~ total_kill, y = ~ state,
name = "total kill", type = "bar"
) %>%
add_trace(x = ~ total_injure, name = "total injure") %>%
layout(yaxis = list(title = "State"), xaxis = list(title = "#Kill/injure"))
lintr::lint("index.Rmd")
lintr::lint("analysis.R")
View(state_num_shootings)
View(state_kill_injure)
View(state_data)
lintr::lint("analysis.R")
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
install.packages("shiny")
install.packages("shiny")
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage(
# A top level header: "First Shiny Website"
h1("First Shiny Website"),
# A Paragraph, describing your excitement: include some `strong` text
p(
paste0("This is the ", strong("First"), "website I build with shiny, and ",
"it will be so ", strong("cool"), "!")
)
# An image with this `src`
img(
"this is image",
src = "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"
)
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
# Another paragraph about a slider: include some `em` text
# A slider with an appropriate label, min of 10, max of 100, value of 50
)
runApp('~/UW/2018 spring/info 201/ch16-shiny/exercise-1')
runApp('~/UW/2018 spring/info 201/ch16-shiny/exercise-1')
runApp('~/UW/2018 spring/info 201/ch16-shiny/exercise-1')
runApp('~/UW/2018 spring/info 201/ch16-shiny/exercise-1')
runApp('~/UW/2018 spring/info 201/ch16-shiny/exercise-1')
runApp('~/UW/2018 spring/info 201/ch16-shiny/exercise-1')
runApp('~/UW/2018 spring/info 201/ch16-shiny/exercise-1')
# Install and load the `shiny` package
library(shiny)
runApp('~/UW/2018 spring/info 201/ch16-shiny/exercise-2')
# Install and load the `shiny` package
library(shiny)
runApp('~/UW/2018 spring/info 201/ch16-shiny/exercise-2')
setwd("~/UW/2018 spring/info 201/ch16-shiny/exercise-2")
runApp()
runApp()
runApp()
runApp()
runApp()
